{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2018/introduction-to-graphql","result":{"data":{"markdownRemark":{"html":"<h2 id=\"-so-what-is-graphql-exactly\" style=\"position:relative;\">üòº So what is GraphQL exactly?<a href=\"#-so-what-is-graphql-exactly\" aria-label=\" so what is graphql exactly permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>A query language for your API.</li>\n<li>GraphQL gives the power to ask for exactly what we need and nothing more.</li>\n<li>Get as many as resources in a single request.</li>\n<li>Evolve your API's without versions.</li>\n<li>GraphQL makes it easy to build powerful tools like <a href=\"https://github.com/graphql/graphiql\" target=\"_blank\" rel=\"nofollow\">GraphiQL</a> by leveraging your API‚Äôs type system.</li>\n</ul>\n<h2 id=\"-concepts-of-graphql\" style=\"position:relative;\">üêô Concepts of GraphQL<a href=\"#-concepts-of-graphql\" aria-label=\" concepts of graphql permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://graphql.org/learn/queries/\" target=\"_blank\" rel=\"nofollow\">Queries &#x26; Mutations</a> - GraphQL queries are so much easier to request data than a REST API.</li>\n<li><a href=\"https://graphql.org/learn/schema/\" target=\"_blank\" rel=\"nofollow\">Schema &#x26; Types, Variables, Arguments</a> - GraphQL has its own schema &#x26; type system which we are already familiar with (<code class=\"language-text\">String</code>, <code class=\"language-text\">Int</code>, <code class=\"language-text\">[]</code> etc.).</li>\n<li><a href=\"https://graphql.org/learn/execution/#root-fields-resolvers\" target=\"_blank\" rel=\"nofollow\">Resolver</a> - is responsible for mapping the query to a function.</li>\n<li><a href=\"https://graphql.org/learn/validation/\" target=\"_blank\" rel=\"nofollow\">Validation</a> - By using the type system, it is easy to determine whether a GraphQL query is valid or not.</li>\n<li><a href=\"https://graphql.org/learn/execution/\" target=\"_blank\" rel=\"nofollow\">Execution</a> - After being validated, a GraphQL query is executed by a GraphQL server which returns a result that mirrors the shape of the requested query, typically as JSON.</li>\n<li><a href=\"https://graphql.org/learn/introspection/\" target=\"_blank\" rel=\"nofollow\">Introspection</a> - It's often useful to ask a GraphQL schema for information about what queries it supports.</li>\n</ul>\n<h2 id=\"-steps-to-run-the-demo\" style=\"position:relative;\">üê£ Steps to run the demo<a href=\"#-steps-to-run-the-demo\" aria-label=\" steps to run the demo permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h5>1. Clone the repo</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/gokulkrishh/introduction-to-graphql</code></pre></div>\n<h5>2. Install dependencies</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> or <span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<h5>3. Run</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> or <span class=\"token function\">npm</span> start</code></pre></div>\n<h2 id=\"-demo\" style=\"position:relative;\">üéÖüèª Demo<a href=\"#-demo\" aria-label=\" demo permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>For local server <strong>open <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"nofollow\">localhost:3000</a> in your browser.</strong></li>\n<li><a href=\"https://hello-world-graphql.surge.sh\" target=\"_blank\" rel=\"nofollow\">Demo using GraphQL API</a>.</li>\n<li><a href=\"https://hello-world-graphql-oifivtepjc.now.sh/graphql\" target=\"_blank\" rel=\"nofollow\">Demo GraphQL Server</a>.</li>\n</ul>\n<h2 id=\"üß§-libraries-i-used-for-demo\" style=\"position:relative;\">üß§ Libraries I used for demo<a href=\"#%F0%9F%A7%A4-libraries-i-used-for-demo\" aria-label=\"üß§ libraries i used for demo permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/graphql\" target=\"_blank\" rel=\"nofollow\">GraphQL</a>.</li>\n<li><a href=\"https://www.npmjs.com/package/express\" target=\"_blank\" rel=\"nofollow\">Express</a> server.</li>\n<li><a href=\"https://www.npmjs.com/package/express-graphql\" target=\"_blank\" rel=\"nofollow\">GraphQL HTTP Server Middleware</a>.</li>\n<li><a href=\"https://github.com/apollographql/apollo-fetch\" target=\"_blank\" rel=\"nofollow\">apollo-fetch</a> for making fetch requests for demo.</li>\n</ul>\n<h3 id=\"1-variables-arguments--types\" style=\"position:relative;\">1. Variables, Arguments &#x26; Types<a href=\"#1-variables-arguments--types\" aria-label=\"1 variables arguments  types permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Like any other programming language, GraphQL has <code class=\"language-text\">variables</code>, <code class=\"language-text\">arguments</code>. Let's see some examples.</p>\n<h4><a href=\"https://graphql.org/graphql-js/type/\" target=\"_blank\" rel=\"nofollow\">Types</a></h4>\n<p>The most basic components of a GraphQL schema are object types, which just represent a kind of object you can fetch from your service, and what fields it has. If you are a web developer, you can relate this to <a href=\"https://github.com/facebook/flow\" target=\"_blank\" rel=\"nofollow\">flow</a> or <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\" target=\"_blank\" rel=\"nofollow\">typescript</a>.</p>\n<h5><strong>Example</strong>:</h5>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">String!</code> - <code class=\"language-text\">name</code> property is a non-nullable string. Meaning you will always give a value to this property.</li>\n<li><a href=\"https://graphql.org/graphql-js/type/\" target=\"_blank\" rel=\"nofollow\">More types</a>.</li>\n</ul>\n<h4><a href=\"https://graphql.org/learn/queries/#arguments\" target=\"_blank\" rel=\"nofollow\">Arguments</a></h4>\n<p>We can pass arguments to any query.</p>\n<h5><strong>Example</strong>:</h5>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> user <span class=\"token punctuation\">{</span>\n  getUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    age\n    gender\n    picture\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4><a href=\"https://graphql.org/learn/queries/#variables\" target=\"_blank\" rel=\"nofollow\">Variables</a></h4>\n<p>So far, we have been writing all of our arguments inside the query string. But in most applications, the arguments to fields will be dynamic.</p>\n<h5><strong>Example</strong>:</h5>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"userId\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>query</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> user<span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  getUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    age\n    gender\n    picture\n    about\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2--queries-get-apis\" style=\"position:relative;\">2. ü§î Queries (GET API's)<a href=\"#2--queries-get-apis\" aria-label=\"2  queries get apis permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4>1. What is better than a Hello World ü§™</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> helloworld <span class=\"token punctuation\">{</span>\n  hello\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>2. To get all the users from dummy JSON.</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> getAllUsers <span class=\"token punctuation\">{</span>\n  getUsers <span class=\"token punctuation\">{</span>\n    name\n    age\n    gender\n    picture\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Resolver <a href=\"https://github.com/gokulkrishh/introduction-to-graphql/blob/master/resolvers/Query.js#L9\" target=\"_blank\" rel=\"nofollow\">getUsers</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUsers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> gender <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">===</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Price Weber\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://placehold.it/32x32\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pennington Parsons\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://placehold.it/32x32\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Yesenia Galloway\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">36</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"female\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://placehold.it/32x32\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3. To get a single user based on an id.</h4>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> user <span class=\"token punctuation\">{</span>\n  getUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    age\n    gender\n    picture\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Resolver <a href=\"https://github.com/gokulkrishh/introduction-to-graphql/blob/master/resolvers/Query.js#L3\" target=\"_blank\" rel=\"nofollow\">getUser</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User not found for the id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Price Weber\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"picture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://placehold.it/32x32\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3--mutations\" style=\"position:relative;\">3. üçî Mutations<a href=\"#3--mutations\" aria-label=\"3  mutations permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>Most discussions of GraphQL focus on data fetching, but any complete data platform needs a way to modify server-side data as well. It is analogous to performing HTTP verbs such as <code class=\"language-text\">POST</code>, <code class=\"language-text\">PATCH</code>, and <code class=\"language-text\">DELETE</code>. Just like queries, mutation should have <code class=\"language-text\">mutation</code> instead of <code class=\"language-text\">query</code> with some id or something.</p>\n<h5><strong>Examples</strong>: open <strong><a href=\"http://localhost:3000/graphql\" target=\"_blank\" rel=\"nofollow\">localhost:3000/graphql</a></strong> to try the below.</h5>\n<h4>Create a new user: (POST API ü§™)</h4>\n<p><strong>variables</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"JEDI\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"gender\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>mutation</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> user<span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$gender</span><span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  createUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    age\n    gender\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Resolver for <a href=\"https://github.com/gokulkrishh/introduction-to-graphql/blob/master/resolvers/Mutation.js#L3\" target=\"_blank\" rel=\"nofollow\">createUser</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// users from DB</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save in DB and return</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">A user with that name already exists.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"createUser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JEDI\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Update existing user details: (PUT API üòÅ)</h4>\n<p><strong>variables</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"JEDI üôÉ\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">26</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>mutation</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> user<span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  updateUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">gender</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    age\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Resolver for <a href=\"https://github.com/gokulkrishh/introduction-to-graphql/blob/master/resolvers/Mutation.js#L13\" target=\"_blank\" rel=\"nofollow\">updateUser</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Save the updates in DB and return</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User doesn't exist for id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"updateUser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JEDI üôÉ\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Delate a user: (DELETE API üòú)</h4>\n<p><strong>variables</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>mutation</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">mutation</span> user<span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> Int<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  deleteUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    id\n    name\n    age\n    gender\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Resolver <a href=\"https://github.com/gokulkrishh/introduction-to-graphql/blob/master/resolvers/Mutation.js#L24\" target=\"_blank\" rel=\"nofollow\">deleteUser</a></strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">deleteUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Delete from DB and return user or return ok</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">User doesn't exist for id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Result</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"deleteUser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Price Weber\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"gender\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"male\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-ü•ä-test-cases-for-graphql\" style=\"position:relative;\">4. ü•ä Test Cases for GraphQL.<a href=\"#4-%F0%9F%A5%8A-test-cases-for-graphql\" aria-label=\"4 ü•ä test cases for graphql permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>If are wondering how to write test cases for GraphQL. Here is an example for you <a href=\"https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsValidation-test.js\" target=\"_blank\" rel=\"nofollow\">starWarsValidation-test.js</a>.</p>\n<h3 id=\"5--limitations-of-graphql\" style=\"position:relative;\">5. üê∑ Limitations of GraphQL<a href=\"#5--limitations-of-graphql\" aria-label=\"5  limitations of graphql permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>Specific Response Structure</strong> may be required - In GraphQL the response matches the shape of the query, so if you need to respond in a very specific structure, you'll have to add a transformation layer to reshape the response.</li>\n<li><strong>Handling File Upload</strong> - There is nothing about file upload in the GraphQL specification and mutations doesn‚Äôt accept files in the arguments.</li>\n<li><strong>Cache at Network Level</strong> - Because of the common way GraphQL is used over HTTP (A POST in a single endpoint), cache at network level becomes hard. A way to solve it is to use Persisted Queries.</li>\n<li><strong>Rate Limiting</strong> - Limiting the API call's to the particular query is the problem in GraphQL. Github recently introduced GraphQL with the different approach to solving this issue. Take a <a href=\"https://developer.github.com/v4/guides/resource-limitations/\" target=\"_blank\" rel=\"nofollow\">look here</a>.</li>\n</ul>\n<h3 id=\"6--references\" style=\"position:relative;\">6. üèÜ References<a href=\"#6--references\" aria-label=\"6  references permalink\" class=\"blog-post-heading-link after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><a href=\"https://graphql.org/learn/best-practices/\" target=\"_blank\" rel=\"nofollow\">Best practices for GraphQL</a> - Serving over HTTP, Pagination, Caching etc.</li>\n<li><a href=\"https://graphql.org/graphql-js/running-an-express-graphql-server/\" target=\"_blank\" rel=\"nofollow\">Running an Express GraphQL Server</a></li>\n<li><a href=\"https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/\" target=\"_blank\" rel=\"nofollow\">GraphQL vs REST</a>.</li>\n<li><a href=\"https://github.com/apollographql/apollo-fetch\" target=\"_blank\" rel=\"nofollow\">Apollo-Fetch</a> - Handle all POST fetch calls as normal fetch API (See demo folder for more).</li>\n</ul>\n<p>Thanks for reading so far üòô. Share this post if you liked it.</p>","frontmatter":{"date":"Aug 20, 2018","updated":null,"slug":"/blog/2018/introduction-to-graphql","title":"Introduction to GraphQL","relative":null},"fields":{"readingTime":{"text":"7 min read"}}}},"pageContext":{"slug":"/blog/2018/introduction-to-graphql"}},"staticQueryHashes":[]}